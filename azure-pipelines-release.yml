### Release Candidate Pipeline
### Project :: kmdp-trisotech-asset-repository-service

# Sets Virtual Machine to Run Pipeline on
pool:
  vmImage: "ubuntu-latest"

# Gets Variables from Azure DevOps Library
variables:
  - group: kmdp-platform-variables
  - group: kmdp-platform-dev-variables

# ------------------ PIPELINE STEPS  ------------------
steps:
  # Outputs pipeline steps have started
  - script: |
      echo Starting KARS Release Candidate Build Pipeline!
      echo Project :: kmdp-knowledge-asset-repository-service
    displayName: "Starting Pipeline Steps"

  # Sets Git Credentials on the VM set from variable group
  # $env:GIT_REDIRECT_STDERR = '2>&1' prevents unwanted errors
  - task: PowerShell@2
    displayName: "Git Config User"
    inputs:
      targetType: "inline"
      script: |
        $env:GIT_REDIRECT_STDERR = '2>&1'
        git config --global user.email "$env:GIT_USER_EMAIL"
        git config --global user.name "$env:GIT_USER_NAME"
        Write-Host Email: "$env:GIT_USER_EMAIL"
        Write-Host User Name: "$env:GIT_USER_NAME"
    env:
      GIT_USER_EMAIL: $(gitUserEmail)
      GIT_USER_NAME: $(gitUserName)

  # Gets .m2 Settings File from Azure DevOps Library
  # Downloads File for use in Pipeline
  - task: DownloadSecureFile@1
    displayName: "Downloads Secure .m2 Settings File"
    name: settingsxml
    inputs:
      secureFile: settings-dev.xml

  # Write settings file to Build Server
  - task: PowerShell@2
    displayName: "Update m2 Settings File"
    inputs:
      targetType: "inline"
      script: |
        New-Item -Type Directory -Force "${HOME}/.m2"
        Copy-Item -Force "$(settingsxml.secureFilePath)" "${HOME}/.m2/settings.xml"

  # Authenticate to Maven Feed
  - task: MavenAuthenticate@0
    displayName: "Maven Authenticate"
    inputs:
      artifactsFeeds: "KMD"

  # Sets JDK 11 for Pipeline
  # Runs Maven Goal: validate
  - task: Maven@3
    displayName: "Sets Pipeline to JDK 11"
    inputs:
      mavenPomFile: "pom.xml"
      goals: "validate"
      options: "-ntp"
      javaHomeOption: "JDKVersion"
      jdkVersionOption: "1.11"

  # Create Release Branch
  - task: PowerShell@2
    displayName: "KARS Checkout Release Candidate"
    inputs:
      targetType: "inline"
      script: |
        Write-Host ------ Starting Checkout ------
        # Checkout develop branch to create release candidate from
        git checkout --track origin/develop
        # Create release version
        git checkout -b "release-$env:KARS_RELEASE_VERSION"
        # mvn set version of release branch root pom and then clean install
        mvn versions:set "-DnewVersion=$env:KARS_RELEASE_VERSION" -DprocessAllModules -ntp
        mvn versions:update-parent "-DparentVersion=$env:TIER1_RELEASE_VERSION" -ntp
        type pom.xml
        mvn clean install -Prelease "-DaltDeploymentRepository=$env:DEPLOY_REPO::default::$env:DEPLOY_REPO_PATH" -ntp
        Write-Host ------ Ending Checkout ------
    env:
      KARS_DEVELOP_VERSION: $(knowledgeAssetRepoServiceDevelop)
      KARS_RELEASE_VERSION: $(knowledgeAssetRepoServiceReleaseVersion)
      KARS_PREVIOUS_DEVELOP_VERSION: $(knowledgeAssetRepoServicePreviousDevelop)
      TIER1_RELEASE_VERSION: $(tier1ReleaseVersion)

  ## Check New Develop Version
  - task: PowerShell@2
    displayName: "KARS Check Develop"
    inputs:
      targetType: "inline"
      script: |
        Write-Host ------ Starting Checkout ------
        # Checkout release branch to commit
        git add .
        git commit -a -m "candidate release $env:KARS_RELEASE_VERSION"
        # Check develop branch to rebase
        git checkout develop
        git rebase "release-$env:KARS_RELEASE_VERSION"
        mvn versions:set "-DnewVersion=$env:KARS_DEVELOP_VERSION" -DprocessAllModules -DallowSnapshots=true -ntp
        mvn versions:update-parent "-DparentVersion=$env:TIER1_DEVELOP_VERSION" -DallowSnapshots=true  -ntp
        type pom.xml
        mvn clean install "-Dspring.profiles.active=dev" "-DaltDeploymentRepository=$env:DEPLOY_REPO::default::$env:DEPLOY_REPO_PATH" -ntp
        Write-Host ------ Ending Checkout ------
    env:
      KARS_DEVELOP_VERSION: $(knowledgeAssetRepoServiceDevelop)
      KARS_RELEASE_VERSION: $(knowledgeAssetRepoServiceReleaseVersion)
      KARS_PREVIOUS_DEVELOP_VERSION: $(knowledgeAssetRepoServicePreviousDevelop)
      TIER1_RELEASE_VERSION: $(tier1ReleaseVersion)
      TIER1_DEVELOP_VERSION: $(tier1NewDevelopVersion)

  # Push to develop branches/release candidate branches
  - task: PowerShell@2
    displayName: "Push Develop Branch Release Candidates"
    inputs:
      targetType: "inline"
      script: |
        Write-Host ------ Starting Checkout ------
        Write-Host ------ Pushing Develop Branch ------
        git add .
        git commit -a -m "[skip ci] update develop branch for new version: $env:KARS_DEVELOP_VERSION"
        git push "https://kmd:$env:SYSTEM_ACCESSTOKEN@dev.azure.com/mclm/KMD/_git/kmdp-knowledge-asset-repository-service"
        Write-Host ------ Pushing Release Candidate Branch ------
        git checkout "release-$env:KARS_RELEASE_VERSION"
        git push --set-upstream "https://kmd:$env:SYSTEM_ACCESSTOKEN@dev.azure.com/mclm/KMD/_git/kmdp-knowledge-asset-repository-service" "release-$env:KARS_RELEASE_VERSION"
        Write-Host ------ Ending  Checkout ------
    env:
      KARS_DEVELOP_VERSION: $(knowledgeAssetRepoServiceDevelop)
      KARS_RELEASE_VERSION: $(knowledgeAssetRepoServiceReleaseVersion)
      SYSTEM_ACCESSTOKEN: $(system.accesstoken)

  # ------------------ END PIPELINE  ------------------
  - script: |
      echo Ending Release Candidate KARS Pipeline!
    displayName: "Pipeline Steps Ended"
