### Develop Pipeline
### Develop Snapshot Branch X.X.X-SNAPSHOT
### Project :: KMDP KNOWLEDGE ASSET REPO SERVICE

# !! Downstream Build: kmdp-glossary-library-service; develop !!

trigger:
- develop

resources:
  pipelines:
    - pipeline: kmdpKnowledgeAssetRepositoryServiceDevelop
      source: kmdpInferenceBrokerDevelop
      trigger: 
        branches:
          - develop

pool:
  vmImage: 'ubuntu-latest'

# ------------------ PIPELINE STEPS  ------------------
steps:
- script: |
    echo Starting KMDP Develop Branch!
    echo Project :: KMDP KNOWLEDGE ASSET REPO SERVICE
  displayName: 'Pipeline Steps Started'

# Download Secure Settings m2 File
- task: DownloadSecureFile@1
  displayName: 'Download Secure m2'
  name: settingsxml
  inputs:
    secureFile: settings-dev.xml

# Write settings file to Build Server
- task: PowerShell@2
  displayName: 'Update m2 Settings File'
  inputs:
    targetType: 'inline'
    script: |
      New-Item -Type Directory -Force "${HOME}/.m2"
      Copy-Item -Force "$(settingsxml.secureFilePath)" "${HOME}/.m2/settings.xml"

# Authenticate to Maven Feed 
- task: MavenAuthenticate@0
  displayName: 'Maven Authenticate'
  inputs:
    artifactsFeeds: 'KMD'

# Set JDK 11 and MVN Validate Project
- task: Maven@3
  displayName: 'Set Maven JDK 11'
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'validate'
    options: '-ntp'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'

# Read Root POM File and Set GAV Variables
- task: PowerShell@2
  displayName: 'Read POM/Set GAV Variables'
  inputs:
    targetType: 'inline'
    script: |
      [xml]$pomXml = Get-Content .\pom.xml
      Write-Host ---- Group Id, Artifact Id, Version ----
      Write-Host GroupId: $pomXml.project.groupId
      Write-Host ArtifactId: $pomXml.project.artifactId
      Write-Host Version: $pomXml.project.version
      # Write GAV to local task variables
      $groupId=$pomXml.project.groupId
      $artifactId=$pomXml.project.artifactId
      $version=$pomXml.project.version
      # Set GAV to pipeline variables
      Write-Host "##vso[task.setvariable variable=projectSnapShotVersion]$version"
      Write-Host "##vso[task.setvariable variable=projectGroupId]$groupId"
      Write-Host "##vso[task.setvariable variable=projectArtifactId]$artifactId"

# Write GAV variables for validation
- task: PowerShell@2
  displayName: 'Validate Env Variables'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host --------------------------------
      Write-Host POM Variables:
      Write-Host Project Group ID: $env:GROUP_ID
      Write-Host Project Artifact ID: $env:ARTIFACT_ID
      Write-Host Project Snapshot Version: $env:PROJECT_SNAPSHOT_VERSION
  env: 
    ARTIFACT_ID: $(projectArtifactId)
    PROJECT_SNAPSHOT_VERSION: $(projectSnapShotVersion)
    GROUP_ID: $(projectGroupId)

# SLM Versioning Policy (Preprod)
- task: AlmVersioning@4
  displayName: 'SLM Update Version and Build Number'
  inputs:
    projectType: java
    versionFilePath: kmdp-knowledge-asset-repository-impl/pom.xml
    versionTransformation: 'preprod'

# Update Build Number by removing Snapshots
- task: PowerShell@2
  displayName: 'Update Build # Remove Snapshot'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host AfterSlmBuild: $Env:BUILD_BUILDNUMBER
      $buildNumber = $Env:BUILD_BUILDNUMBER
      $finalBuildNumber = $buildNumber.replace("-SNAPSHOT","")
      Write-Host AfterSLMBuildRemoveSnap: $finalBuildNumber
 
      Write-Host "##vso[build.updatebuildnumber]$finalBuildNumber"
  env:
    BUILD_BUILDNUMBER: $(build.buildNumber)

# Retrieve SLM preprod version
- task: PowerShell@2
  displayName: 'Retrieve SLM Preprod Version'
  inputs:
    targetType: 'inline'
    script: |
        Write-Host ALM Version: $env:ALM_VERSION
        $projectSlmVersion=$env:ALM_VERSION.replace("-SNAPSHOT","")
        Write-Host Project Version: $projectSlmVersion
        Write-Host "##vso[task.setvariable variable=projectSlmVersionFinal]$projectSlmVersion"
  env:
    ALM_VERSION: $(AlmVersioning.Project.Version)

# Set Version of Deployable War
- task: PowerShell@2
  displayName: 'Maven Set Version Deployable War'
  inputs:
    targetType: 'inline'
    script: |
        mvn versions:set -pl kmdp-knowledge-asset-repository-impl "-DnewVersion=$env:PROJECT_SLM_VERSION" -ntp
  env:
    PROJECT_SLM_VERSION: $(projectSlmVersionFinal)

# Maven Deploy to AzDo KMD Artifacts
- task: Maven@3
  displayName: 'Maven Deploy to KMD Artifacts'
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'deploy'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    jdkArchitectureOption: 'x64'
    options: '-DaltDeploymentRepository=KMD::default::https://pkgs.dev.azure.com/mclm/_packaging/KMD/maven/v1 -ntp'

# Copy Files to build
- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
      SourceFolder: '$(system.defaultworkingdirectory)'
      Contents: |
        **/*.war
      TargetFolder: '$(build.artifactstagingdirectory)'

# Export Variables
- task: ImportExportVariables@1
  displayName: 'Export Build Variables'
  inputs:
    action: 'Export'

# Publish to Azure Pipelines
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: deploy'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
    ArtifactName: deploy
  condition: succeededOrFailed()

# ------------------ END PIPELINE  ------------------
- script: |
    echo Ending Develop Branch Pipeline!
  displayName: 'Pipeline Steps Ended' 
