### Develop Pipeline
### Snapshot Branch Versioning Stategy: X.X.X-SNAPSHOT
### Project :: kmdp-knowledge-asset-repository-service

# !! Downstream Build: kmdp-glossary-library-service; develop !! #

trigger: 
  branches:
    include:
      - develop
    exclude:
      - feature*
  paths:
    exclude:
      - azure-pipelines-develop.yml
      - azure-pipelines-features.yml
      - release-notes.md
      - README.md

# Watches upstream build for success to run
resources:
  pipelines:
    - pipeline: kmdpKnowledgeAssetRepositoryServiceDevelop
      source: kmdpKnowledgeInferenceBrokerDevelop
      trigger: 
        branches:
          - develop

# Sets Virtual Machine to Run Pipeline on
pool:
  vmImage: 'ubuntu-latest'

# Gets Variables from Azure DevOps Library
variables: 
  - group: kmdp-platform-variables
  - group: kmd-veracode

# ------------------ PIPELINE STEPS  ------------------
steps:
# Outputs pipeline steps have started
- script: |
    echo Starting Develop Branch Build Pipeline!
    echo Project :: kmdp-knowledge-asset-repository-service
  displayName: 'Starting Pipeline Steps'

- task: PowerShell@2
  displayName: 'Run Veracode Pipeline Scan'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host Run Veracode Pipeline Scan

      Write-Host "veracode/kmdp-knowledge-asset-repository-impl/target/kmdp-knowledge-asset-repository-impl-$env:PROJECT_SLM_VERSION"
      Write-Host "$env:VERACODE_API_ID"
    failOnStderr: true
  env:
    SYSTEM_ACCESSTOKEN: $(system.accesstoken)
    PROJECT_SLM_VERSION: $(projectSlmVersionFinal)
    VERACODE_API_ID: $(veracodeApiId)
    VERACODE_API_TOKEN: $(veracodeApiToken)

# Reads Root pom.xml File
# Gets/Sets GAV from POM to Pipeline Variables
- task: PowerShell@2
  displayName: 'Get/Set POM Variables'
  inputs:
    targetType: 'inline'
    script: |
      [xml]$pomXml = Get-Content .\pom.xml
      Write-Host --------------------------------
      Write-Host POM Variables:
      Write-Host GroupId: $pomXml.project.groupId
      Write-Host ArtifactId: $pomXml.project.artifactId
      Write-Host Version: $pomXml.project.version
      Write-Host --------------------------------
      Write-Host Setting GAV to local task variables
      $groupId=$pomXml.project.groupId
      $artifactId=$pomXml.project.artifactId
      $version=$pomXml.project.version
      Write-Host --------------------------------
      Write-Host Setting GAV to pipeline variables
      Write-Host "##vso[task.setvariable variable=projectSnapShotVersion]$version"
      Write-Host "##vso[task.setvariable variable=projectGroupId]$groupId"
      Write-Host "##vso[task.setvariable variable=projectArtifactId]$artifactId"

# Gets .m2 Settings File from Azure DevOps Library
# Downloads File for use in Pipeline
- task: DownloadSecureFile@1
  displayName: 'Downloads Secure .m2 Settings File'
  name: settingsxml
  inputs:
    secureFile: settings-dev.xml

# Write settings file to Build Server
- task: PowerShell@2
  displayName: 'Update m2 Settings File'
  inputs:
    targetType: 'inline'
    script: |
      New-Item -Type Directory -Force "${HOME}/.m2"
      Copy-Item -Force "$(settingsxml.secureFilePath)" "${HOME}/.m2/settings.xml"

# Authenticate to Maven Feed 
- task: MavenAuthenticate@0
  displayName: 'Maven Authenticate'
  inputs:
    artifactsFeeds: 'KMD'

# Sets JDK 11 for Pipeline
# Runs Maven Goal: validate
- task: Maven@3
  displayName: 'Sets Pipeline to JDK 11'
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'validate'
    options: '-ntp'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'

# Sets ALM/SLM Versioning Policy on War
# Sets Version Tranformation: preprod
- task: AlmVersioning@4
  displayName: 'SLM Update .war Version and Build Number'
  inputs:
    projectType: java
    versionFilePath: kmdp-knowledge-asset-repository-impl/pom.xml
    versionTransformation: 'preprod'

# Remove SNAPSHOT version from build number
- task: PowerShell@2
  displayName: 'Update Build # Remove Snapshot'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host AfterSlmBuild: $Env:BUILD_BUILDNUMBER
      $buildNumber = $Env:BUILD_BUILDNUMBER
      $finalBuildNumber = $buildNumber.replace("-SNAPSHOT","")
      Write-Host AfterSLMBuildRemoveSnap: $finalBuildNumber
      Write-Host "##vso[build.updatebuildnumber]$finalBuildNumber"
  env:
    BUILD_BUILDNUMBER: $(build.buildNumber)

# Retrieve SLM preprod version
- task: PowerShell@2
  displayName: 'Retrieve SLM Preprod Version'
  inputs:
    targetType: 'inline'
    script: |
        Write-Host ALM Version: $env:ALM_VERSION
        $projectSlmVersion=$env:ALM_VERSION.replace("-SNAPSHOT","")
        Write-Host Project Version: $projectSlmVersion
        Write-Host "##vso[task.setvariable variable=projectSlmVersionFinal]$projectSlmVersion"
  env:
    ALM_VERSION: $(AlmVersioning.Project.Version)

# Runs Maven Goal: versions:set 
# Set Version of Deployable War
- task: PowerShell@2
  displayName: 'Maven Set Version Deployable War'
  inputs:
    targetType: 'inline'
    script: |
        mvn versions:set -pl kmdp-knowledge-asset-repository-impl "-DnewVersion=$env:PROJECT_SLM_VERSION" -ntp
  env:
    PROJECT_SLM_VERSION: $(projectSlmVersionFinal)

# Runs Maven Goal: deploy 
# Deploys to Azure DevOps Artifacts
- task: PowerShell@2
  displayName: 'Maven Deploy to Artifacts'
  inputs:
    targetType: 'inline'
    script: |
      mvn deploy "-DaltDeploymentRepository=$env:DEPLOY_REPO::default::$env:DEPLOY_REPO_PATH" -ntp
  env:
    DEPLOY_REPO: $(deploymentRepo)
    DEPLOY_REPO_PATH: $(deploymentRepoPath)

# Write SLM version to variable group for assetRepoWarVersion
- task: PowerShell@2
  displayName: 'Update Variable Group by Id'
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.
      $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f "",$env:SYSTEM_ACCESSTOKEN)))
      $url = "https://dev.azure.com/mclm/KMD/_apis/distributedtask/variablegroups/19?api-version=6.1-preview.1"
      $variables = Invoke-RestMethod -Uri $url -Method Get -ContentType "application/json" -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)}
      $variables.variables.assetRepoWarVersion.value = $env:PROJECT_SLM_VERSION
      $jsonFile = @($variables) | ConvertTo-Json -Depth 99
      $pipeline = Invoke-RestMethod -Uri $url -Method Put -Body $jsonFile -ContentType "application/json" -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)}
      Write-Host "New Variable Value:" $pipeline.variables.assetRepoWarVersion.value
  env:
    SYSTEM_ACCESSTOKEN: $(system.accesstoken)
    PROJECT_SLM_VERSION: $(projectSlmVersionFinal)

# Copy War File to build
- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
      SourceFolder: '$(system.defaultworkingdirectory)'
      Contents: |
        **/*.war
      TargetFolder: '$(build.artifactstagingdirectory)'

# Make directory for veracode scan
- task: PowerShell@2
  displayName: 'Make directory for veracode scan'
  inputs:
    targetType: 'inline'
    script: |
        mkdir veracode

# Veracode Files to scan
- task: CopyFiles@2
  displayName: 'Copy Files to veracode folder'
  inputs:
      SourceFolder: '$(system.defaultworkingdirectory)'
      Contents: |
        **/*.war
      TargetFolder: 'veracode'

# Download Veracode Pipeline Scanner
- task: CmdLine@2
  displayName: 'Download latest Veracode pipeline scanner'
  inputs:
    script: |
      echo Download Pipeline Scanner
      
      curl -O -L https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip

# Unzip Veracode Pipeline Scanner
- task: ExtractFiles@1
  displayName: 'Unzip Veracode Pipeline Scan'
  inputs:
    archiveFilePatterns: 'pipeline-scan-LATEST.zip'
    cleanDestinationFolder: false
    overwriteExistingFiles: false
    destinationFolder: 'veracode'

# Run Veracode Pipeline Scan
- task: CmdLine@2
  displayName: 'Run Veracode Pipeline Scan'
  inputs:
    script: |
      echo Run Veracode Pipeline Scan

      echo "veracode/kmdp-knowledge-asset-repository-impl/target/kmdp-knowledge-asset-repository-impl-$(projectSlmVersionFinal).war"

      chmod 777 "veracode/kmdp-knowledge-asset-repository-impl/target/kmdp-knowledge-asset-repository-impl-$(projectSlmVersionFinal).war"

      java -Dpipeline.debug=true -jar veracode/pipeline-scan.jar --veracode_api_id "$(veracodeApiId)"" --veracode_api_key "$(veracodeApiToken)"" --file "veracode/kmdp-knowledge-asset-repository-impl/target/kmdp-knowledge-asset-repository-impl-$(projectSlmVersionFinal).war"
    failOnStderr: true
  env:
    SYSTEM_ACCESSTOKEN: $(system.accesstoken)
    PROJECT_SLM_VERSION: $(projectSlmVersionFinal)
    VERACODE_API_ID: $(veracodeApiId)
    VERACODE_API_TOKEN: $(veracodeApiToken)
    
# Export Variables
- task: ImportExportVariables@1
  displayName: 'Export Build Variables'
  inputs:
    action: 'Export'

# Publish to Azure Pipelines
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: deploy'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
    ArtifactName: deploy
  condition: succeededOrFailed()

# Publish to Azure Pipelines
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: veracode'
  inputs:
    PathtoPublish: 'veracode'
    ArtifactName: veracode
  condition: succeededOrFailed()

# ------------------ END PIPELINE  ------------------
- script: |
    echo Ending Develop Branch Pipeline!
  displayName: 'Pipeline Steps Ended' 
